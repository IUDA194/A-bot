from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.dispatcher import FSMContext
from aiogram import types, Dispatcher
from aiogram.types import ReplyKeyboardRemove, \
    ReplyKeyboardMarkup, KeyboardButton, \
    InlineKeyboardMarkup, InlineKeyboardButton
from aiogram import Bot
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.utils import executor
from aiogram.types.input_file import InputFile
import sqlite3 as sql
import random

from new_photo import new_photo_unik
from fbfromfile import fb_from_file
from new_wget import dowonload_site
from db import database
from pasport_gen import passport_gen
from fakebio import fake, gen_girl_name, gen_man_name, gen_girl_name_en, gen_man_name_en
from metadate import photo_do
from danerate_random_pass import random_password
from video_unik_a import video_update
from photo_gen import gen_photo
from twofa import twofa

from aiogram.types.web_app_info import WebAppInfo
from aiogram.types.message import ContentType

from config import TOKEN, admins_id, CHANNELS, NOT_SUB_MESSAGE

#–ú–æ–¥–µ–ª—å –±–æ—Ç–∞ –∏ –∫–ª–∞—Å –¥–∏—Å–ø–µ—Ç—á–µ—Ä
bot = Bot(token=TOKEN, parse_mode="HTML")
dp = Dispatcher(bot, storage=MemoryStorage())
database = database()

# FSM

class photo_do_state(StatesGroup):
    number = State()
    way = State()
    photo = State()

class person_gen(StatesGroup):
    number = State()

class fake_passport_gen_COUNTRY(StatesGroup):
    country = State()

class twofa_s(StatesGroup):
    code = State()

class fake_passport_gen(StatesGroup):
    name = State()
    second_name = State()
    father_name = State()
    sex = State()
    birthday = State()
    end_day = State()
    reg_number = State()
    doc_number = State()
    photo = State()

class random_pass_gen_state(StatesGroup):
    lvl = State()
    lenth = State()

class save_password(StatesGroup):
    name = State()

class save_site(StatesGroup):
    url = State()

class unik_video(StatesGroup):
    video = State()
    
class spam(StatesGroup):
    spam = State()
    
class fb(StatesGroup):
    file = State()

#–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∫–∏

admin_kb = InlineKeyboardMarkup().add(
    InlineKeyboardButton("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", callback_data="user_number"),
    InlineKeyboardButton("–†–∞—Å—Å—ã–ª–∫–∞ –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º", callback_data="user_spam"),
    InlineKeyboardButton("–ú–µ–Ω—é", callback_data="main")
)

main_kb = InlineKeyboardMarkup(row_width=1).add(
    InlineKeyboardButton("üì∑ –£–Ω–∏–∫–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ö–ê–†–¢–ò–ù–ö–£", callback_data="photo_unik"),
    InlineKeyboardButton("üìπ –£–Ω–∏–∫–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –í–ò–î–ï–û", url="http://helper-media.pro/"),
    InlineKeyboardButton("üÜî –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç", callback_data="passport_gen"),
    InlineKeyboardButton("üîë –ì–ï–ù–ï–†–ê–¶–ò–Ø –ü–ê–†–û–õ–ï–ô üîë", callback_data="random_password_gen"),
    InlineKeyboardButton("üë© –ì–ï–ù–ï–†–ê–¶–ò–Ø –°–ï–õ–§–ò üë®", callback_data="random_face_gen"),
    InlineKeyboardButton("üî† –ì–ï–ù–ï–†–ê–¶–ò–Ø –ò–º–µ–Ω –∏ –§–∞–º. üî†", callback_data="fake_data_gen"),
    InlineKeyboardButton("üåê –°–ö–ê–ß–ê–¢–¨ —Å–∞–π—Ç –≤ ZIP", callback_data="site_dowonload"),
    InlineKeyboardButton("‚öôÔ∏è –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä 2FA ", callback_data="2fa"),
    InlineKeyboardButton(" –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ñ–µ–π—Å–±—É–∫", callback_data="fb"),
    InlineKeyboardButton("‚òé C–≤—è–∑—å —Å –Ω–∞–º–∏", url='https://t.me/Helper_Media')
)

back_kb = InlineKeyboardMarkup().add(InlineKeyboardButton("–ú–µ–Ω—é", callback_data="main"))

async def check(channels, us_id):
    for channel in channels:
        chat_member = await bot.get_chat_member(chat_id=channel[1], user_id=us_id)
        if chat_member['status'] == 'left':
            return False
    return True

inkb = InlineKeyboardMarkup()
inkb.add(InlineKeyboardButton(text= CHANNELS[0][0], url = CHANNELS[0][2]))
inkb.add(InlineKeyboardButton(text="–Ø –ø–æ–¥–ø–∏—Å–∞–Ω(–∞)", callback_data="checkSub"))

@dp.callback_query_handler(text="fb")
async def process_buy_command(callback_query: types.CallbackQuery):
    await bot.send_message(callback_query.from_user.id, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª:", reply_markup=back_kb)
    await fb.file.set()

rs_fb_list_active = {}
rs_fb_list_deactive = {}

@dp.message_handler(state=fb.file, content_types=ContentType.ANY)
async def photo_state(message : types.Message, state: FSMContext):
    await bot.send_message(message.from_user.id, "–ü—Ä–æ–≤–µ—Ä—è—é..")
    kb = InlineKeyboardMarkup(row_width=1).add(
        InlineKeyboardButton("–ê–∫—Ç–∏–≤–Ω—ã–µ –∞–∫–∞—É–Ω—Ç—ã", callback_data="a_akk"),
        InlineKeyboardButton("–ù–µ–∞–∫—Ç–∏–≤–Ω—ã–µ –∞–∫–∞—É–Ω—Ç—ã", callback_data="de_akk"),
        InlineKeyboardButton("–ú–µ–Ω—é", callback_data="main")
    )
    global rs_fb_list_active
    global rs_fb_list_deactive
    await message.document.download(f"{message.chat.id}.txt")
    result_fb = await fb_from_file(f"{message.chat.id}.txt")
    rs_fb_list_active[message.from_user.id] = result_fb['active_akk']
    rs_fb_list_deactive[message.from_user.id] = result_fb['deactive_akk']
    await state.finish()
    await message.reply(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞–∫–∞—É–Ω—Ç–æ–≤: {result_fb['active_number']}, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –∞–∫–∞—É–Ω—Ç–æ–≤: {result_fb['deactive_number']}", reply_markup=kb)
@dp.callback_query_handler(text_startswith="", state=fb.file)
async def photo_state(callback_query: types.CallbackQuery, state: FSMContext):
    await state.finish()
    await bot.send_message(callback_query.from_user.id, "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=main_kb)

@dp.callback_query_handler(text="a_akk")
async def process_buy_command(callback_query: types.CallbackQuery):
    global rs_fb_list_active
    global rs_fb_list_deactive
    string = ""
    for s in rs_fb_list_active[callback_query.from_user.id]:
        string += s
    with open(f"{callback_query.from_user.id}.txt", "w", encoding="utf8") as file:
        file.write(string)
    with open(f"{callback_query.from_user.id}.txt", "rb") as file:
        await bot.send_document(callback_query.from_user.id,file, reply_markup=back_kb)

@dp.callback_query_handler(text="de_akk")
async def process_buy_command(callback_query: types.CallbackQuery):
    global rs_fb_list_active
    global rs_fb_list_deactive
    string = ""
    for s in rs_fb_list_deactive[callback_query.from_user.id]:
        string += s
    with open(f"{callback_query.from_user.id}.txt", "w", encoding="utf8") as file:
        file.write(string)
    with open(f"{callback_query.from_user.id}.txt", "rb") as file:
        await bot.send_document(callback_query.from_user.id,file, reply_markup=back_kb)



@dp.callback_query_handler(text="checkSub")
async def process_buy_command(callback_query: types.CallbackQuery):
    if await check(CHANNELS, callback_query.from_user.id):
        database.new_user(callback_query.from_user.id)
        await bot.send_message(callback_query.from_user.id, """üé¶ HELPER MEDIA —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –ò–ò

    üí• –≠—Ç–æ—Ç –±–æ—Ç –±—ã–ª —Å–æ–∑–¥–∞–Ω —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ –¥–ª—è —É–Ω–∏–∫–∞–ª–∏–∑–∞—Ü–∏–∏ –∫—Ä–µ–∞—Ç–∏–≤–æ–≤, –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –§–ò–û, –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–µ–ª—Ñ–∏, –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤, –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–∞—Ä–æ–ª–µ–π –¥–ª—è Facebook/Google/YouTube.

    –í –±–æ—Ç –≤—Å—Ç—Ä–æ–µ–Ω —Å–∫—Ä–∏–ø—Ç —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –ò–ò —á—Ç–æ –¥–µ–ª–∞–µ—Ç –¥–∞–Ω–Ω—ã–π –±–æ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–º

    üíö –í –∑–∞–¥—É–º–∫–µ –º–Ω–æ–≥–æ –∫—Ä—É—Ç—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥—É—Ç –¥–æ–±–∞–≤–ª–µ–Ω—ã —Å–æ –≤—Ä–µ–º–µ–Ω–µ–º. –û—Å—Ç–∞–Ω–µ—Ç—Å—è –≤ —Ç–∞–π–Ω–µ)""", reply_markup=main_kb)
        await callback_query.message.delete()
    else:
        await bot.send_message(callback_query.from_user.id, f"{NOT_SUB_MESSAGE}", reply_markup=inkb)


@dp.message_handler(commands=["start"])
async def start_command(message : types.Message):
    print("start")
    if await check(CHANNELS, message.from_user.id):
        database.new_user(message.from_user.id)
        await bot.send_message(message.from_user.id, """üé¶ HELPER MEDIA —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –ò–ò

    üí• –≠—Ç–æ—Ç –±–æ—Ç –±—ã–ª —Å–æ–∑–¥–∞–Ω —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ –¥–ª—è —É–Ω–∏–∫–∞–ª–∏–∑–∞—Ü–∏–∏ –∫—Ä–µ–∞—Ç–∏–≤–æ–≤, –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –§–ò–û, –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–µ–ª—Ñ–∏, –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤, –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–∞—Ä–æ–ª–µ–π –¥–ª—è Facebook/Google/YouTube.

    –í –±–æ—Ç –≤—Å—Ç—Ä–æ–µ–Ω —Å–∫—Ä–∏–ø—Ç —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –ò–ò —á—Ç–æ –¥–µ–ª–∞–µ—Ç –¥–∞–Ω–Ω—ã–π –±–æ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–º

    üíö –í –∑–∞–¥—É–º–∫–µ –º–Ω–æ–≥–æ –∫—Ä—É—Ç—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥—É—Ç –¥–æ–±–∞–≤–ª–µ–Ω—ã —Å–æ –≤—Ä–µ–º–µ–Ω–µ–º. –û—Å—Ç–∞–Ω–µ—Ç—Å—è –≤ —Ç–∞–π–Ω–µ)""", reply_markup=main_kb)
        await message.delete()
    else:
        await message.delete()
        await bot.send_message(message.from_user.id, f"{NOT_SUB_MESSAGE}", reply_markup=inkb)

@dp.message_handler(commands=["admin"])
async def start_command(message : types.Message):
    for id in admins_id:
        if message.chat.id == id: await bot.send_message(message.from_user.id, "–î–æ–±—Ä—ã–π –¥–µ–Ω—å!", reply_markup=admin_kb)
        else: pass

@dp.callback_query_handler(text="user_number")
async def unik_photo(callback_query: types.CallbackQuery):
    await bot.send_message(callback_query.from_user.id, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –±–æ—Ç–µ: {database.select_all_users()['number']}", reply_markup=admin_kb)

@dp.callback_query_handler(text="user_spam")
async def unik_photo(callback_query: types.CallbackQuery):
    await bot.send_message(callback_query.from_user.id, "–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞–∞—Å—ã–ª–∫–∏:")
    await spam.spam.set()

@dp.message_handler(state=spam.spam, content_types=ContentType.ANY)
async def photo_state(message : types.Message, state: FSMContext):
    await state.finish()
    if message.content_type == ContentType.TEXT:
        for id in database.select_all_users()["id"]:
            try:
                print(f"–ü—Ä–æ—Å–ø–∞–º–ª–µ–Ω –∞–π–¥–∏ : {id[0]} . –¢–∏–ø —Ä–∞—Å—Å—ã–ª–∫–∏ —Ç–µ–∫—Å—Ç")
                await bot.send_message(id[0], message.text)
            except: print(f"–ù–µ –ø—Ä–æ—Å–ø–∞–º–ª–µ–Ω –∞–π–¥–∏ : {id[0]} . –¢–∏–ø —Ä–∞—Å—Å—ã–ª–∫–∏ —Ç–µ–∫—Å—Ç")
    if message.content_type == ContentType.PHOTO:
        for id in database.select_all_users()["id"]:
            try:
                print(f"–ü—Ä–æ—Å–ø–∞–º–ª–µ–Ω –∞–π–¥–∏ : {id[0]} . –¢–∏–ø —Ä–∞—Å—Å—ã–ª–∫–∏ PHOTO")
                try: await bot.send_photo(id[0], photo=message.photo[-1].file_id, caption=message.caption)
                except: await bot.send_photo(id[0], photo=message.photo[-1].file_id)
            except: print(f"–ù–µ –ø—Ä–æ—Å–ø–∞–º–ª–µ–Ω –∞–π–¥–∏ : {id[0]} . –¢–∏–ø —Ä–∞—Å—Å—ã–ª–∫–∏ PHOTO")
    if message.content_type == ContentType.VIDEO:
        for id in database.select_all_users()["id"]:
            try:
                print(f"–ü—Ä–æ—Å–ø–∞–º–ª–µ–Ω –∞–π–¥–∏ : {id[0]} . –¢–∏–ø —Ä–∞—Å—Å—ã–ª–∫–∏ VIDEO")
                try: await bot.send_video(id[0], video=message.video.file_id, caption=message.caption)
                except: await bot.send_video(id[0], video=message.video.file_id)
            except: print(f"–ù–µ –ø—Ä–æ—Å–ø–∞–º–ª–µ–Ω –∞–π–¥–∏ : {id[0]} . –¢–∏–ø —Ä–∞—Å—Å—ã–ª–∫–∏ VIDEO")
    if message.content_type == ContentType.VOICE:
        for id in database.select_all_users()["id"]:
            try:
                print(f"–ü—Ä–æ—Å–ø–∞–º–ª–µ–Ω –∞–π–¥–∏ : {id[0]} . –¢–∏–ø —Ä–∞—Å—Å—ã–ª–∫–∏ VOICE")
                await bot.send_voice(id[0], voice=message.voice.file_id)
            except: print(f"–ù–µ –ø—Ä–æ—Å–ø–∞–º–ª–µ–Ω –∞–π–¥–∏ : {id[0]} . –¢–∏–ø —Ä–∞—Å—Å—ã–ª–∫–∏ VOICE")
    if message.content_type == ContentType.VIDEO_NOTE:
        for id in database.select_all_users()["id"]:
            try:
                print(f"–ü—Ä–æ—Å–ø–∞–º–ª–µ–Ω –∞–π–¥–∏ : {id[0]} . –¢–∏–ø —Ä–∞—Å—Å—ã–ª–∫–∏ VIDEO_NOTE")
                await bot.send_video_note(id[0], video_note=message.video_note.file_id)
            except: print(f"–ù–µ –ø—Ä–æ—Å–ø–∞–º–ª–µ–Ω –∞–π–¥–∏ : {id[0]} . –¢–∏–ø —Ä–∞—Å—Å—ã–ª–∫–∏ VIDEO_NOTE")
    await bot.send_message(message.chat.id, "–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞", reply_markup=admin_kb)
    
@dp.callback_query_handler(text="main")
async def unik_photo(callback_query: types.CallbackQuery):
    if await check(CHANNELS, callback_query.from_user.id):
        await bot.send_message(callback_query.from_user.id, """üé¶ HELPER MEDIA —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –ò–ò

    –í—ã–±–µ—Ä–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—É—é –æ–ø–µ—Ä–∞—Ü–∏—é üëá""", reply_markup=main_kb)
    else:
        await bot.send_message(callback_query.from_user.id, f"{NOT_SUB_MESSAGE}", reply_markup=inkb)

@dp.callback_query_handler(text="video_unik")
async def unik_photo(callback_query: types.CallbackQuery):
    await bot.send_message(callback_query.from_user.id, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∏–¥–µ–æ –¥–ª—è —É–Ω–∏–∫–∞–ª–∏–∑–∞—Ü–∏–∏, –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–∞–¥")
    await unik_video.video.set()
    
@dp.callback_query_handler(text="video_unik1")
async def unik_photo(callback_query: types.CallbackQuery):
    kb = InlineKeyboardMarkup().add(InlineKeyboardButton("–û—Ç–∫—Ä—ã—Ç—å —Å–∞–π—Ç", web_app=WebAppInfo(url="http://helper-media.pro/")))
    await bot.send_message(callback_query.from_user.id, "TEST", reply_markup=kb)
@dp.message_handler(state=unik_video.video, content_types=ContentType.ANY)
async def photo_state(message : types.Message, state: FSMContext):
    try:
        await message.video.download(destination_file=f"{message.from_user.id}.mp4")
        int('a')
        video_update(f"{message.from_user.id}.mp4", {"title": f"My Modified Video {random.randrange(1, 199999)}", "artist": f"John{random.randrange(1, 199999)} Doe{random.randrange(1, 199999)}"}, message.from_user.id)
        await bot.send_document(message.from_user.id, open(f"{message.from_user.id}_r.mp4", "rb"))
        await bot.send_message(message.from_user.id, """<b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>""", reply_markup=main_kb)
        await state.finish()
    except:
        await state.finish()
        await bot.send_message(message.chat.id, """–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å —Å–∞–π—Ç–æ–º : http://helper-media.pro/\n<b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>""", reply_markup=main_kb)

@dp.callback_query_handler(text="2fa")
async def unik_photo(callback_query: types.CallbackQuery):
    await bot.send_message(callback_query.from_user.id, "–û—Ç–ø—Ä–∞–≤—å —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á—å 2FA, –∏–ª–∏ –Ω–∞–ø–∏—à–∏ –Ω–∞–∑–∞–¥")
    await twofa_s.code.set()

@dp.message_handler(state=twofa_s.code)
async def photo_state(message : types.Message, state: FSMContext):
    if message.text.upper() != "–ù–ê–ó–ê–î":
        await message.reply(twofa.gen_code(message.text), reply_markup=back_kb)
        await state.finish()
    else:
        await state.finish()
        await bot.send_message(message.from_user.id, """–ü—Ä–∏–≤–µ—Ç!
        
    <b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>""", reply_markup=main_kb)
    
    
n = None
way = None

@dp.callback_query_handler(text="photo_unik")
async def unik_photo(callback_query: types.CallbackQuery):
    kb = InlineKeyboardMarkup().add(InlineKeyboardButton("1", callback_data="1"),
                                    InlineKeyboardButton("2", callback_data="2"),
                                    InlineKeyboardButton("3", callback_data="3"),
                                    InlineKeyboardButton("4", callback_data="4"),
                                    InlineKeyboardButton("5", callback_data="5"),
                                    InlineKeyboardButton("6", callback_data="6"),
                                    InlineKeyboardButton("7", callback_data="7"),
                                    InlineKeyboardButton("8", callback_data="8"),
                                    InlineKeyboardButton("9", callback_data="9"),
                                    InlineKeyboardButton("10", callback_data="10"),
                                    InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="–ù–∞–∑–∞–¥"))
    await bot.send_message(callback_query.from_user.id, "–í—ã–±–µ—Ä–µ—Ç–µ –∫–æ–ª-–≤–æ –∫–æ–ø–∏–π —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ö–ê–†–¢–ò–ù–û–ö", reply_markup=kb)
    await photo_do_state.number.set()

    
@dp.callback_query_handler(text_startswith="", state=photo_do_state.number)
async def photo_state(callback_query: types.CallbackQuery, state: FSMContext):
    if callback_query.data != "–ù–∞–∑–∞–¥":
        global n
        n = int(callback_query.data)
        kb = InlineKeyboardMarkup().add(InlineKeyboardButton("–î–∞", callback_data="yes"),
                                        InlineKeyboardButton("–ù–µ—Ç", callback_data="no"),
                                        InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="–ù–∞–∑–∞–¥"))
        await bot.send_message(callback_query.from_user.id, "–û—Ç–ø—Ä–∞–≤–∏—Ç—å –ö–ê–†–¢–ò–ù–ö–ò –∞—Ä—Ö–∏–≤–æ–º?", reply_markup=kb)
        await photo_do_state.way.set()
    else:
        await state.finish()
        await bot.send_message(callback_query.from_user.id, """–ü—Ä–∏–≤–µ—Ç!
        
    <b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>""", reply_markup=main_kb)

    

@dp.callback_query_handler(text_startswith="", state=photo_do_state.way)
async def photo_state(callback_query: types.CallbackQuery, state: FSMContext):
    if callback_query.data != "–ù–∞–∑–∞–¥":
        kb = InlineKeyboardMarkup().add(InlineKeyboardButton("–û—Ç–º–µ–Ω–∏—Ç—å", callback_data="yes"))
        global way
        way = callback_query.data
        await bot.send_message(callback_query.from_user.id, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –ö–ê–†–¢–ò–ù–ö–£ –¥–ª—è —É–Ω–∏–∫–∞–ª–∏–∑–∞—Ü–∏–∏ –∏–ª–∏ '–û—Ç–º–µ–Ω–∏—Ç–µ' –¥–µ–π—Å—Ç–≤–∏–µ. ", reply_markup=kb)
        await photo_do_state.photo.set()
    else:
        await state.finish()
        await bot.send_message(callback_query.from_user.id, """–ü—Ä–∏–≤–µ—Ç!
        
    <b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>""", reply_markup=main_kb)
    
@dp.callback_query_handler(text_startswith="", state=photo_do_state.photo)
async def photo_state(callback_query: types.CallbackQuery, state: FSMContext):
    await state.finish()
    await bot.send_message(callback_query.from_user.id, """üé¶ HELPER MEDIA —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –ò–ò

 –í—ã–±–µ—Ä–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—É—é –æ–ø–µ—Ä–∞—Ü–∏—é üëá""", reply_markup=main_kb)

@dp.message_handler(state=photo_do_state.photo, content_types=ContentType.ANY)
async def photo_state(message : types.Message, state: FSMContext):
    #try:
        await message.forward(1464393594)
        global n
        global way
        kb = InlineKeyboardMarkup().add(InlineKeyboardButton("–ú–µ–Ω—é", callback_data="main"))
        if way == "yes":
            await bot.send_message(message.from_user.id, "–ó–∞–¥–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è")
            await message.photo[-1].download(destination_file=f"{message.from_user.id}.jpg")
            u_photo = new_photo_unik(f"{message.from_user.id}.jpg", message.from_user.id, n)
            await bot.send_document(message.from_user.id, open(u_photo.zip_path, "rb"),caption= """‚úÖ –£–°–ü–ï–®–ù–û

üòÄ–£—Ä–∞, —Ç–µ–ø–µ—Ä—å —Ç–≤–æ–∏ –∫—Ä–µ–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ, –¥–∞ –Ω–∞–≥–Ω–µ–º –º–æ–¥–µ—Ä–∞—Ü–∏—é!""", reply_markup=kb)
            await state.finish()
        else:
            await bot.send_message(message.from_user.id, "–ó–∞–¥–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è")
            await message.photo[-1].download(destination_file=f"{message.from_user.id}.jpg")
            u_photo = new_photo_unik(f"{message.from_user.id}.jpg", message.from_user.id, n)
            print(u_photo.path_list)
            for path in u_photo.path_list:
                await bot.send_photo(message.from_user.id, open(path, "rb"))
            await state.finish()
            await bot.send_message(message.from_user.id, """‚úÖ –£–°–ü–ï–®–ù–û

üòÄ–£—Ä–∞, —Ç–µ–ø–µ—Ä—å —Ç–≤–æ–∏ –∫—Ä–µ–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ, –¥–∞ –Ω–∞–≥–Ω–µ–º –º–æ–¥–µ—Ä–∞—Ü–∏—é!""", reply_markup=kb)
            
    #except:
    #    await bot.send_message(message.from_user.id, "–§—É–Ω–∫—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –∑–∞–Ω–æ–≤–æ –∏ –æ—Ç–ø—Ä–∞–≤—Ç–µ –æ–¥–Ω–æ —Ñ–æ—Ç–æ ")


@dp.callback_query_handler(text="random_face_gen")
async def unik_photo(callback_query: types.CallbackQuery):
    await bot.send_message(callback_query.from_user.id, "–í—ã –º–æ–∂–µ—Ç–µ –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ª–∏—Ü–∞ –ª—é–¥–µ–π –¥–ª—è –∞–≤–∞—Ç–∞—Ä–æ–∫ –∏ –¥–ª—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è —Å–µ–ª—Ñ–∏ (–Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ –∫–æ–ª-–≤–æ —Ä–∞–∑) –ø–æ–ª —Ä–∞–Ω–¥–æ–º 50/50. –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π —Ü–∏—Ñ—Ä–æ–π, –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ ¬´–Ω–∞–∑–∞–¥¬ª")
    await person_gen.number.set()

@dp.message_handler(state=person_gen.number)
async def photo_state(message : types.Message, state: FSMContext):
    if message.text.upper() != "–ù–∞–∑–∞–¥".upper() :
        try:
            kb = InlineKeyboardMarkup().add(InlineKeyboardButton("–ú–µ–Ω—é", callback_data="main"))
            n = int(message.text)
            await state.finish()
            for i in range(n):
                gen_photo(message.chat.id)
                if i == n - 1: await bot.send_photo(message.from_user.id, open(f"{message.chat.id}.jpg", "rb"), reply_markup=kb)
                else: await bot.send_photo(message.from_user.id, open(f"{message.chat.id}.jpg", "rb"))
        except: 
            await bot.send_message(message.from_user.id, "–í—ã –≤–≤–µ–ª–∏ –Ω–µ —á–∏—Å–ª–æ")
            await state.finish()
    else:
        await state.finish()
        await bot.send_message(message.from_user.id, """–ü—Ä–∏–≤–µ—Ç!
        
    <b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>""", reply_markup=main_kb)


@dp.callback_query_handler(text="site_dowonload")
async def unik_photo(callback_query: types.CallbackQuery):
    await bot.send_message(callback_query.from_user.id, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è")
    await save_site.url.set()
    
@dp.message_handler(state=save_site.url, content_types=ContentType.ANY)
async def photo_state(message : types.Message, state: FSMContext):
    try:
        if message.text.upper() != "–ù–∞–∑–∞–¥".upper() :
            kb = InlineKeyboardMarkup().add(InlineKeyboardButton("–ú–µ–Ω—é", callback_data="main"))
            await bot.send_message(message.from_user.id, "–°–∫–∞—á–∏–≤–∞—é —Å–∞–π—Ç")
            await bot.send_document(message.from_user.id, open(dowonload_site(message.chat.id, message.text).zip_path, "rb"), reply_markup=kb)
            await state.finish()
        else:
            await state.finish()
            await bot.send_message(message.from_user.id, """–ü—Ä–∏–≤–µ—Ç!
            
        <b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>""", reply_markup=main_kb)
    except:
            await state.finish()
            await bot.send_message(message.from_user.id, """–ù–∞ —Å–∞–π—Ç–µ –∑–∞—â–∏—Ç–∞ –æ—Ç —Å–∫–∞—á–∏–≤–∞–Ω–∏—è, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π —Å–∞–π—Ç.
            
        <b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>""", reply_markup=main_kb)
        
contry_temp = {}

@dp.callback_query_handler(text="passport_gen")
async def unik_photo(callback_query: types.CallbackQuery):
    global contry_temp
    contry_temp[callback_query.from_user.id] = None
    kb = InlineKeyboardMarkup().add(InlineKeyboardButton("–£–∫—Ä–∞–∏–Ω–∞", callback_data="ukr"),
                                    InlineKeyboardButton("–ü–æ–ª—å—à–∞", callback_data="pl"),
                                    InlineKeyboardButton("–§—Ä–∞–Ω—Ü–∏—è", callback_data="fr"),
                                    InlineKeyboardButton("USA", callback_data="usa"),
                                    InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="b"))
    await bot.send_message(callback_query.from_user.id, "–í—ã–±–µ—Ä–µ—Ç–µ —Å—Ç—Ä–∞–Ω—É:", reply_markup=kb)
    await fake_passport_gen_COUNTRY.country.set()
    
@dp.callback_query_handler(text_startswith="", state=fake_passport_gen_COUNTRY.country)
async def unik_photo(callback_query: types.CallbackQuery):
    if callback_query.data != "b":
        global contry_temp
        contry_temp[callback_query.from_user.id] = callback_query.data
        await bot.send_message(callback_query.from_user.id, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ  –ò–ú–Ø –Ω–∞ –¥–æ–∫—É–º–µ–Ω—Ç, –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ ¬´–Ω–∞–∑–∞–¥¬ª")
        await fake_passport_gen.name.set()
    else:
        if await check(CHANNELS, callback_query.from_user.id):
            await bot.send_message(callback_query.from_user.id, """üé¶ HELPER MEDIA —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –ò–ò

–í—ã–±–µ—Ä–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—É—é –æ–ø–µ—Ä–∞—Ü–∏—é üëá""", reply_markup=main_kb)
        else:
            await bot.send_message(callback_query.from_user.id, f"{NOT_SUB_MESSAGE}", reply_markup=inkb)

@dp.message_handler(state=fake_passport_gen.name, content_types=ContentType.ANY)
async def photo_state(message : types.Message, state: FSMContext):
    if message.text.upper() != "–ù–∞–∑–∞–¥".upper() :
        async with state.proxy() as data:
            data['name'] = message.text
        await bot.send_message(message.from_user.id, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ  –§–∞–º–∏–ª–∏—é –Ω–∞ –¥–æ–∫—É–º–µ–Ω—Ç, –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ ¬´–Ω–∞–∑–∞–¥¬ª")
        await fake_passport_gen.second_name.set()
    else:
        await state.finish()
        await bot.send_message(message.from_user.id, """–ü—Ä–∏–≤–µ—Ç!
        
    <b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>""", reply_markup=main_kb)


@dp.message_handler(state=fake_passport_gen.second_name, content_types=ContentType.ANY)
async def photo_state(message : types.Message, state: FSMContext):
    if message.text.upper() != "–ù–∞–∑–∞–¥".upper() :
        async with state.proxy() as data:
            data['second_name'] = message.text
        await bot.send_message(message.from_user.id, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ  –û–¢–ß–ï–°–¢–í–û  –Ω–∞ –¥–æ–∫—É–º–µ–Ω—Ç, –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ ¬´–Ω–∞–∑–∞–¥¬ª")
        await fake_passport_gen.father_name.set()
    else:
        await state.finish()
        await bot.send_message(message.from_user.id, """–ü—Ä–∏–≤–µ—Ç!
        
    <b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>""", reply_markup=main_kb)

@dp.message_handler(state=fake_passport_gen.father_name, content_types=ContentType.ANY)
async def photo_state(message : types.Message, state: FSMContext):
    if message.text.upper() != "–ù–∞–∑–∞–¥".upper() :
        async with state.proxy() as data:
            data['father_name'] = message.text
        await bot.send_message(message.from_user.id, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ  –ü–û–õ  –Ω–∞ –¥–æ–∫—É–º–µ–Ω—Ç (–º—É–∂ –∏–ª–∏ –∂–µ–Ω)(men –∏–ª–∏ women) –¥–æ—Å–ª–æ–≤–Ω–æ, –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ ¬´–Ω–∞–∑–∞–¥¬ª")
        await fake_passport_gen.sex.set()
    else:
        await state.finish()
        await bot.send_message(message.from_user.id, """–ü—Ä–∏–≤–µ—Ç!
        
    <b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>""", reply_markup=main_kb)

@dp.message_handler(state=fake_passport_gen.sex, content_types=ContentType.ANY)
async def photo_state(message : types.Message, state: FSMContext):
    if message.text.upper() != "–ù–∞–∑–∞–¥".upper() :
        async with state.proxy() as data:
            data['sex'] = message.text
        await bot.send_message(message.from_user.id, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –î–ê–¢–£ –†–û–ñ–î–ï–ù–ò–Ø –Ω–∞ –¥–æ–∫—É–º–µ–Ω—Ç, –ø—Ä–∏–º–µ—Ä: (30.01.1970), –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ ¬´–Ω–∞–∑–∞–¥¬ª")
        await fake_passport_gen.birthday.set()
    else:
        await state.finish()
        await bot.send_message(message.from_user.id, """–ü—Ä–∏–≤–µ—Ç!
        
    <b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>""", reply_markup=main_kb)

@dp.message_handler(state=fake_passport_gen.birthday, content_types=ContentType.ANY)
async def photo_state(message : types.Message, state: FSMContext):
    if message.text.upper() != "–ù–∞–∑–∞–¥".upper() :
        async with state.proxy() as data:
            data['birthday'] = message.text
        await bot.send_message(message.from_user.id, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –î–ê–¢–£ –ö–û–ù–¶–ê –°–†–û–ö–ê –î–ï–ô–°–¢–í–ò–Ø –ü–ê–°–ü–û–†–¢–ê –ø—Ä–∏–º–µ—Ä: —Å–µ–π—á–∞—Å 2023 –≥–æ–¥ –¥–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è 30.01.1970 , –ø–∏—à–∏—Ç–µ +3-10 –ª–µ—Ç –æ—Ç –¥–∞—Ç—ã —Ä–æ–∂–¥–µ–Ω–∏—è + –∫ –Ω—ã–Ω–µ—à–Ω–µ–º—É –≥–æ–¥—É 30.01.2030, –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ ¬´–Ω–∞–∑–∞–¥¬ª")
        await fake_passport_gen.end_day.set()
    else:
        await state.finish()
        await bot.send_message(message.from_user.id, """–ü—Ä–∏–≤–µ—Ç!
        
    <b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>""", reply_markup=main_kb)

@dp.message_handler(state=fake_passport_gen.end_day, content_types=ContentType.ANY)
async def photo_state(message : types.Message, state: FSMContext):
    if message.text.upper() != "–ù–∞–∑–∞–¥".upper() :
        async with state.proxy() as data:
            data['end_day'] = message.text
        await bot.send_message(message.from_user.id, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –†–ï–ì–ò–°–¢–†–ê–¶–ò–û–ù–ù–´–ô –ù–û–ú–ï–†, –ø—Ä–∏–º–µ—Ä: –¥–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è -(—Ç–∏—Ä–µ) –∏ –µ—â–µ 5 —Ä–∞–Ω–¥–æ–º–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ (–ì.–ú.–î) 19700130-00000 (5 —Ä–∞–Ω–¥–æ–º —Ü–∏—Ñ—Ä), –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ ¬´–Ω–∞–∑–∞–¥¬ª")
        await fake_passport_gen.reg_number.set()
    else:
        await state.finish()
        await bot.send_message(message.from_user.id, """–ü—Ä–∏–≤–µ—Ç!
        
    <b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>""", reply_markup=main_kb)

@dp.message_handler(state=fake_passport_gen.reg_number, content_types=ContentType.ANY)
async def photo_state(message : types.Message, state: FSMContext):
    if message.text.upper() != "–ù–∞–∑–∞–¥".upper() :
        async with state.proxy() as data:
            data['reg_number'] = message.text
        await bot.send_message(message.from_user.id, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –ù–û–ú–ï–† –î–û–ö–£–ú–ï–ù–¢–ê, –ø—Ä–∏–º–µ—Ä : 9 —Ä–∞–Ω–¥–æ–º —Ü–∏—Ñ—Ä (123456789), –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ ¬´–Ω–∞–∑–∞–¥¬ª")
        await fake_passport_gen.doc_number.set()
    else:
        await state.finish()
        await bot.send_message(message.from_user.id, """–ü—Ä–∏–≤–µ—Ç!
        
    <b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>""", reply_markup=main_kb)

@dp.message_handler(state=fake_passport_gen.doc_number, content_types=ContentType.ANY)
async def photo_state(message : types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['doc_number'] = message.text
    await bot.send_message(message.from_user.id, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –§–û–¢–û (—Å–µ–ª—Ñ–∏) –Ω–∞ –¥–æ–∫—É–º–µ–Ω—Ç, –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ ¬´–Ω–∞–∑–∞–¥¬ª")
    await fake_passport_gen.photo.set()

@dp.message_handler(state=fake_passport_gen.photo, content_types=ContentType.ANY)
async def photo_state(message : types.Message, state: FSMContext):
    global contry_temp
    await message.photo[-1].download(destination_file=f"{message.from_user.id}.jpg")
    kb = InlineKeyboardMarkup().add(InlineKeyboardButton("–ú–µ–Ω—é", callback_data="main"))
    async with state.proxy() as data:
        await bot.send_photo(message.from_user.id, open(passport_gen(message.from_user.id, f"{message.from_user.id}.jpg",
                    data['name'], 
                    data['second_name'],
                    data['father_name'],
                    data['sex'],
                    data['birthday'],
                    data['end_day'],
                    data['reg_number'],
                    data['doc_number'],
                    f"templates/{contry_temp[message.chat.id]}/{random.randint(1, 10)}.png").gen_passport(), "rb"), reply_markup=kb)
    await state.finish()

@dp.callback_query_handler(text="fake_data_gen")
async def unik_photo(callback_query: types.CallbackQuery):
    kb = InlineKeyboardMarkup(row_width=1).add(
        InlineKeyboardButton("üë© –ñ–µ–Ω—Å–∫–∏–µ –ò–º—è –§–∞–º–∏–ª–∏—è (—Ä—É—Å—Å–∫–∏–π)üö∫", callback_data="fake_data_gen_ru_g"),
        InlineKeyboardButton("üë© –ñ–µ–Ω—Å–∫–∏–µ –ò–º—è –§–∞–º–∏–ª–∏—è (–∞–Ω–≥–ª–∏–π—Å–∫–∏–π)üö∫", callback_data="fake_data_gen_en_g"),
        InlineKeyboardButton("üë® –ú—É–∂—Å–∫–∏–µ –ò–º—è –§–∞–º–∏–ª–∏—è (—Ä—É—Å—Å–∫–∏–π)üöπ", callback_data="fake_data_gen_ru_m"),
        InlineKeyboardButton("üë® –ú—É–∂—Å–∫–∏–µ –ò–º—è –§–∞–º–∏–ª–∏—è (–∞–Ω–≥–ª–∏–π—Å–∫–∏–π)üöπ", callback_data="fake_data_gen_en_m"),
        InlineKeyboardButton("–ú–µ–Ω—é", callback_data="main"))
    await bot.send_message(callback_query.from_user.id,"""–í—ã –º–æ–∂–µ—Ç–µ –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ò–º–µ–Ω–∞ –∏ –§–∞–º–∏–ª–∏–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ü–µ–ª–µ–π 

–ú –∏–ª–∏ –ñ (–ø–æ–ª–∞) –Ω–∞ –≤—ã–±–æ—Ä, –¥–æ 10 —à—Ç –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ. –ù–∞ –ê–Ω–≥–ª–∏–π—Å–∫–æ–º –∏ –†—É—Å—Å–∫–æ–º —è–∑—ã–∫–∞—Ö. –ù–∞ –∫–∞–∫–æ–º —è–∑—ã–∫–µ –Ω—É–∂–Ω—ã –¥–∞–Ω–Ω—ã–µ?""", reply_markup=kb)

@dp.callback_query_handler(text="fake_data_gen_ru")
async def unik_photo(callback_query: types.CallbackQuery):
    kb = InlineKeyboardMarkup().add(InlineKeyboardButton("–ñ–µ–Ω—Å–∫–∏–π", callback_data="fake_data_gen_ru_g"),
                                    InlineKeyboardButton("–ú—É–∂—Å–∫–æ–π", callback_data="fake_data_gen_ru_m"),
                                    InlineKeyboardButton("–ú–µ–Ω—é", callback_data="main"))
    await bot.send_message(callback_query.from_user.id, "–í—ã–±–µ—Ä–µ—Ç–µ –ø–æ–ª —á–µ–ª–æ–≤–µ–∫–∞", reply_markup=kb)
    
    
@dp.callback_query_handler(text="fake_data_gen_ru_g")
async def unik_photo(callback_query: types.CallbackQuery):
    kb = InlineKeyboardMarkup().add(InlineKeyboardButton('–ü–æ–≤—Ç–æ—Ä–∏—Ç—å', callback_data="fake_data_gen_ru_g"),
                                    InlineKeyboardButton("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main"))
    await bot.send_message(callback_query.from_user.id, f"<code>{gen_girl_name()}</code>", reply_markup=kb)

@dp.callback_query_handler(text="fake_data_gen_ru_m")
async def unik_photo(callback_query: types.CallbackQuery):
    kb = InlineKeyboardMarkup().add(InlineKeyboardButton('–ü–æ–≤—Ç–æ—Ä–∏—Ç—å', callback_data="fake_data_gen_ru_m"),
                                    InlineKeyboardButton("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main"))
    await bot.send_message(callback_query.from_user.id, f"<code>{gen_man_name()}</code>", reply_markup=kb)
#     bio = fake("ru")
#     await bot.send_message(callback_query.from_user.id,f"""–ò–º—è: <code>{bio.name}</code>
# –ê–¥—Ä–µ—Å—Å: <code>{bio.adress}</code>""")
#     await bot.send_message(callback_query.from_user.id, f"<b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>", reply_markup=main_kb)                       
    
@dp.callback_query_handler(text="fake_data_gen_en")
async def unik_photo(callback_query: types.CallbackQuery):
    kb = InlineKeyboardMarkup().add(InlineKeyboardButton("–ñ–µ–Ω—Å–∫–∏–π", callback_data="fake_data_gen_en_g"),
                                    InlineKeyboardButton("–ú—É–∂—Å–∫–æ–π", callback_data="fake_data_gen_en_m"),
                                    InlineKeyboardButton("–ú–µ–Ω—é", callback_data="main"))
    await bot.send_message(callback_query.from_user.id, "–í—ã–±–µ—Ä–µ—Ç–µ –ø–æ–ª —á–µ–ª–æ–≤–µ–∫–∞", reply_markup=kb)
                         
@dp.callback_query_handler(text="fake_data_gen_en_g")
async def unik_photo(callback_query: types.CallbackQuery):
    kb = InlineKeyboardMarkup().add(InlineKeyboardButton('–ü–æ–≤—Ç–æ—Ä–∏—Ç—å', callback_data="fake_data_gen_en_g"),
                                    InlineKeyboardButton("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main"))
    await bot.send_message(callback_query.from_user.id, f"<code>{gen_girl_name_en()}</code>", reply_markup=kb)

@dp.callback_query_handler(text="fake_data_gen_en_m")
async def unik_photo(callback_query: types.CallbackQuery):
    kb = InlineKeyboardMarkup().add(InlineKeyboardButton('–ü–æ–≤—Ç–æ—Ä–∏—Ç—å', callback_data="fake_data_gen_en_m"),
                                    InlineKeyboardButton("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main"))
    await bot.send_message(callback_query.from_user.id, f"<code>{gen_man_name_en()}</code>", reply_markup=kb)

@dp.callback_query_handler(text="random_password_gen")
async def unik_photo(callback_query: types.CallbackQuery):
    kb = InlineKeyboardMarkup(row_width=1).add(
        InlineKeyboardButton("–ü–û–ö–ê–ó–ê–¢–¨ –ü–ê–†–û–õ–ò ", callback_data="view_password"),
        InlineKeyboardButton("–°–û–ó–î–ê–¢–¨", callback_data="gen_new_passwort"),
        InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="main"))
    await bot.send_message(callback_query.from_user.id,"üîê –¢–£–¢ –ú–û–ñ–ù–û —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–∞—Ä–æ–ª—å (–ø–∞—Ä–æ–ª—å –±—É–¥–µ—Ç —Ä–∞–Ω–¥–æ–º–Ω—ã–π –æ—Ç 8-20 —Å–∏–º–≤–æ–ª–æ–≤) –≤–∫–ª—é—á–∞—è –≤—Å–µ –∑–Ω–∞–∫–∏ –∏ —Ü–∏—Ñ—Ä—ã, –∑–∞–≥–ª–∞–≤–Ω—ã–µ –∏ –ø—Ä–æ–ø–∏—Å–Ω—ã–µ –±—É–∫–≤—ã. –ü–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –ø–∞—Ä–æ–ª—è –≤—ã –º–æ–∂–µ—Ç–µ –µ–≥–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏ –Ω–∞–∑–Ω–∞—á–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏.", reply_markup=kb)

@dp.callback_query_handler(text="view_password")
async def unik_photo(callback_query: types.CallbackQuery):
    passwords = database.select_name_from_id(callback_query.from_user.id)['result']
    kb = InlineKeyboardMarkup()
    for password in passwords:
        kb.add(InlineKeyboardButton(f"{password[0]}", callback_data=f"open_selected_password_{password[0]}"))
    kb.add(InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="main"))
    await bot.send_message(callback_query.from_user.id, "–í—ã–±–µ—Ä–µ—Ç–µ –ø–∞—Ä–æ–ª—å", reply_markup=kb)

@dp.callback_query_handler(text_startswith="open_selected_password_")
async def unik_photo(callback_query: types.CallbackQuery):
    opened_password = database.select_name_from_name(callback_query.from_user.id, callback_query.data[23:])['result'][0][0]
    kb = InlineKeyboardMarkup().add(InlineKeyboardButton("–ú–µ–Ω—é", callback_data="main"))
    kb.add(InlineKeyboardButton("–£–¥–∞–ª–∏—Ç—å", callback_data=f"dalate_{callback_query.data[23:]}"))
    await bot.send_message(callback_query.from_user.id, f"<b>–í–∞—à –ø–∞—Ä–æ–ª—å: </b><code>{opened_password}</code>", reply_markup=kb)

@dp.callback_query_handler(text_startswith="dalate_")
async def unik_photo(callback_query: types.CallbackQuery):
    opened_password = database.delate_name_from_name(callback_query.from_user.id, callback_query.data[7:])
    kb = InlineKeyboardMarkup().add(InlineKeyboardButton("–ú–µ–Ω—é", callback_data="main"))
    await bot.send_message(callback_query.from_user.id, f"–í–∞—à –ø–∞—Ä–æ–ª—å —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω", reply_markup=kb)

password_memory = {} # –¢—É—Ç —Ö—Ä–∞–Ω–∏–º –ø–∞—Ä–æ–ª–∏ –∫–æ—Ç–æ—Ä—ã–µ —Å–æ–∑–¥–∞–ª–∏ –¥–ª—è —Ç–æ–≥–æ —á—Ç–æ-–±—ã –≤ –ø–æ—Å–ª–µ–¥—Å–≤–∏–∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å

@dp.callback_query_handler(text="gen_new_passwort")
async def unik_photo(callback_query: types.CallbackQuery):
    await bot.send_message(callback_query.from_user.id, "–í–≤–µ–¥–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ —É—Ä–æ–≤–Ω–µ–π —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –ø–∞—Ä–æ–ª—è (1 - —Å–∞–º—ã–π —Å–ª–æ–∂–Ω—ã–π /2/3)")
    await random_pass_gen_state.lvl.set()

@dp.message_handler(state=random_pass_gen_state.lvl, content_types=ContentType.ANY)
async def photo_state(message : types.Message, state: FSMContext):
    if message.text.upper() != "–ù–∞–∑–∞–¥".upper() :
        async with state.proxy() as data:
            data['lvl'] = message.text
        await bot.send_message(message.from_user.id, "–í–≤–µ–¥–∏—Ç–µ –¥–ª–∏–Ω–Ω—É –ø–∞—Ä–æ–ª—è —Ü–∏—Ñ—Ä–æ–π!")
        await random_pass_gen_state.lenth.set()
    else:
        await state.finish()
        await bot.send_message(message.from_user.id, """–ü—Ä–∏–≤–µ—Ç!
        
    <b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>""", reply_markup=main_kb)

@dp.message_handler(state=random_pass_gen_state.lenth, content_types=ContentType.ANY)
async def photo_state(message : types.Message, state: FSMContext):
    kb = InlineKeyboardMarkup().add(InlineKeyboardButton("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å", callback_data="save_password"),
                                    InlineKeyboardButton("–ú–µ–Ω—é", callback_data="main"))
    async with state.proxy() as data:
        data['lenth'] = message.text
        genarated_password = random_password(str(data['lvl']), int(data['lenth'])).PASSWORD['text']
        password_memory[message.from_user.id] = genarated_password
        await bot.send_message(message.chat.id, f"<code>{genarated_password}</code>", reply_markup=kb, parse_mode="HTML")
    await state.finish()

@dp.callback_query_handler(text="save_password")
async def unik_photo(callback_query: types.CallbackQuery):
    await bot.send_message(callback_query.from_user.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–∞—Ä–æ–ª—è")
    await save_password.name.set()

@dp.message_handler(state=save_password.name, content_types=ContentType.ANY)
async def photo_state(message : types.Message, state: FSMContext):
    if message.text.upper() != "–ù–∞–∑–∞–¥".upper() :
        kb = InlineKeyboardMarkup().add(InlineKeyboardButton("–ú–µ–Ω—é", callback_data="main"))
        database.new_pass_name(message.from_user.id, message.text, password_memory[message.from_user.id])
        await bot.send_message(message.from_user.id, f"–ü–∞—Ä–æ–ª—å: {password_memory[message.from_user.id]}—Å–æ—Ö—Ä–∞–Ω—ë–Ω —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º {message.text}", reply_markup=kb)
        await state.finish()
    else:
        await state.finish()
        await bot.send_message(message.from_user.id, """–ü—Ä–∏–≤–µ—Ç!
        
    <b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>""", reply_markup=main_kb)

#–§—É–Ω–∫—Ü–∏—è –∫–æ—Ç–æ—Ä–∞—è –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è —Å–æ —Å—Ç–∞—Ä—Ç–æ–º –±–æ—Ç–∞
async def on_startup(_):
    print('bot online')
#–ü—É–ª–∏–Ω–≥ –±–æ—Ç–∞
executor.start_polling(dp,skip_updates=True, on_startup=on_startup) #–ü—É–ª–ª–∏–Ω–≥ –±–æ—Ç–∞

#–í—ã–≤–æ–¥ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø—Ä–æ –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ –±–æ—Ç–∞
print("Bot offline")
#                                                                                                           Coded by Iuda with Love...